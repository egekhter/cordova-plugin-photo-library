env:
  global:
    # To get a list of available targets run the command android list targets
    - EMULATOR_API_LEVEL=23
    - EMULATOR_TARGET=android-$EMULATOR_API_LEVEL
    - EMULATOR_ABI=google_apis/armeabi-v7a # armeabi-v7a
sudo: false

android:
  components:
    # To get a list of available exact component names and descriptions run the command android list sdk --no-ui --all --extended

    # We want to use the latest revision of Android SDK Tools
    - tools # to get the new `repository-11.xml`
    - platform-tools
    - tools # to install Android SDK tools 25.x.x, see https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943

    # The BuildTools version used by your project
    - build-tools-25.1.7

    # The SDK version used to compile your project
    - android-24

    # Needed by emulator
    - android-$EMULATOR_API_LEVEL

    # Additional components
    # - extra-google-google_play_services
    # - extra-google-m2repository
    # - extra-android-m2repository
    # - addon-google_apis-google-19

    # Specify at least one system image, if you need to run emulator(s) during your tests
    #- sys-img-armeabi-v7a-android-$EMULATOR_API_LEVEL
    - sys-img-armeabi-v7a-google_apis-$EMULATOR_API_LEVEL

before_install:
  #- sudo apt-get update -qq
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then android list targets; fi
  - nvm install 6
  - node --version
  # Workaround for 8.2 causes multiple simulators error: https://github.com/travis-ci/travis-ci/issues/7031

install:
  - npm install
  - npm install -g cordova
  - cordova --version

before_script:
  - pwd
  - echo $PATH
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo no | android create avd --force -n test -t "$EMULATOR_TARGET" --abi $EMULATOR_ABI; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then emulator -avd test -no-audio -no-window -memory 1024 & fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then timeout 540 android-wait-for-emulator; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then bash tests/android/wait-for-emulator-boot.sh; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb shell input keyevent 82; fi #KEYCODE_MENU
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then npm run copy-test-images:android:emulator; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cat ./node_modules/adb-ci/adb-ci.txt; fi

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then timeout 540 npm run test:android; fi

# TODO: remove
after_success:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb shell /system/bin/screencap -p /sdcard/screenshot.png; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb pull /sdcard/screenshot.png screenshot.png; fi
  - ls -l
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cat ./node_modules/adb-ci/adb-ci.txt; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb logcat -d; fi

after_failure:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb shell /system/bin/screencap -p /sdcard/screenshot.png; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb pull /sdcard/screenshot.png screenshot.png; fi
  #- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cat ./node_modules/adb-ci/adb-ci.txt; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb logcat -d; fi

before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

